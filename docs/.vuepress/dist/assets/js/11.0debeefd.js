(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{335:function(t,s,a){t.exports=a.p+"assets/img/hosts_path.503731ee.png"},336:function(t,s,a){t.exports=a.p+"assets/img/hosts.0f04d213.png"},337:function(t,s,a){t.exports=a.p+"assets/img/dns.34d22333.png"},434:function(t,s,a){"use strict";a.r(s);var e=a(5),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"页面呈现、重绘和回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面呈现、重绘和回流","aria-hidden":"true"}},[t._v("#")]),t._v(" 页面呈现、重绘和回流")]),t._v(" "),e("h2",{attrs:{id:"呈现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#呈现","aria-hidden":"true"}},[t._v("#")]),t._v(" 呈现")]),t._v(" "),e("p",[e("strong",[t._v("首先得了解从输入 url 到页面最终显示出来的这段过程发生了什么：")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("在地址栏中输入 url；")])]),t._v(" "),e("li",[e("p",[t._v("浏览器首先查看浏览器缓存 -> 系统缓存 -> 路由器缓存。若缓存中有对应文件，则直接返回对应的文件，若没有，跳转第三步；")])]),t._v(" "),e("li",[e("p",[t._v("解析 url，如果是一个域名，先进行 "),e("a",{attrs:{href:"#dns-%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B"}},[t._v("DNS 解析")]),t._v("，获取相应的 ip；")])]),t._v(" "),e("li",[e("p",[t._v("浏览器向服务器发起 tcp 连接，建立"),e("code",[t._v("三次握手")]),t._v("；")])]),t._v(" "),e("li",[e("p",[t._v("握手成功后，浏览器向服务器发送 http 请求，请求数据包；")])]),t._v(" "),e("li",[e("p",[t._v("服务器接收到请求，处理并返回数据；")])]),t._v(" "),e("li",[e("p",[t._v("浏览器收到服务器的 http 响应；")])]),t._v(" "),e("li",[e("p",[t._v("读取页面内容，解析源码；")])]),t._v(" "),e("li",[e("p",[t._v("构建 dom 树和样式结构体；")])]),t._v(" "),e("li",[e("p",[t._v("根据 dom 树和样式结构体生成 render 树；")])]),t._v(" "),e("li",[e("p",[t._v("根据 render 树许安然处最终页面。")])])]),t._v(" "),e("p",[e("strong",[t._v("浏览器获取到 HTML 文件后对文件进行解析：")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("浏览器把获取到的 html 代码解析成 1 个 dom 树，html 中的每个 tag 都是 dom 树中的 1 个节点，根节点就是我们常用的 document 对象(html)。dom 树就是我们调试时看到的 html 结构，里面包含了所有的 html 元素，包括"),e("code",[t._v("display:none")]),t._v("隐藏的元素，还有用 JS 动态添加的元素等；")])]),t._v(" "),e("li",[e("p",[t._v("浏览器把所有样式(主要包括 css 和浏览器的样式设置)解析成样式结构体，在解析的过程中会去掉浏览器不能识别的样式，比如 IE 会去掉-moz 开头的样式，而 firefox 会去掉"),e("code",[t._v("_")]),t._v("开头的样式。")])]),t._v(" "),e("li",[e("p",[t._v("dom tree 和样式结构体结合后构建呈现树(render tree),render tree 有点类似于 dom tree，但其实区别有很大，render tree 能识别样式，render tree 中每个 node 都有自己的 style，而且 render tree 不包含隐藏的节点(比如 "),e("code",[t._v("display:none")]),t._v(" 的节点，还有 head 节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree 中。注意:"),e("code",[t._v("visibility:hidden")]),t._v(" 隐藏的元素还是会包含到 render tree 中的，因为 "),e("code",[t._v("visibility:hidden")]),t._v(" 会影响布局(layout)，会占有空间。根据 css2 的标准，render tree 中的每个节点都称为 "),e("code",[t._v("box(Box dimensions)")]),t._v("，box 所有属性：width,height,margin,padding,left,top,border 等。")])]),t._v(" "),e("li",[e("p",[t._v("一旦 render tree 构建完毕后，浏览器就可以根据 render tree 来绘制页面了。")])])]),t._v(" "),e("h2",{attrs:{id:"重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重绘","aria-hidden":"true"}},[t._v("#")]),t._v(" 重绘")]),t._v(" "),e("p",[t._v("当 render tree 中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如 background-color。则称为重绘。")]),t._v(" "),e("h2",{attrs:{id:"回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回流","aria-hidden":"true"}},[t._v("#")]),t._v(" 回流")]),t._v(" "),e("p",[t._v("当 render tree 中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建（重新布局）。这就称为回流。每个页面至少需要一次回流，就是在页面第一次加载的时候。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",[t._v("回流一定重绘，重绘不一定回流。")])]),t._v(" "),e("h2",{attrs:{id:"什么操作会引起页面重绘、回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么操作会引起页面重绘、回流","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么操作会引起页面重绘、回流")]),t._v(" "),e("p",[t._v("任何对 render tree 中元素的操作都会引起回流或重绘：")]),t._v(" "),e("ul",[e("li",[t._v("添加、删除元素（回流 + 重绘）；")]),t._v(" "),e("li",[t._v("隐藏/显示元素：display：none （回流 + 重绘）， visibility:hidden (重绘)；")]),t._v(" "),e("li",[t._v("移动元素至另一节点内（回流 + 重绘）；")]),t._v(" "),e("li",[t._v("移动元素，改变元素 top,left 属性或 jquery 的 animate 方法（重绘，不一定回流）；")]),t._v(" "),e("li",[t._v("修改元素样式（重绘，不一定回流）；")]),t._v(" "),e("li",[t._v("用户手动改变浏览器大小，字体大小（回流 + 重绘）；")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("p",[t._v("回流比重绘的代价要更高，回流的花销跟 render tree 有多少节点需要重新构建有关系，假设你直接操作 body，比如在 body 最前面插入 1 个元素，会导致整个 render tree 回流，这样代价当然会比较高，但如果是指 body 后面插入 1 个元素，则不会影响前面元素的回流。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" style "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nstyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("padding "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 回流 + 重绘")]),t._v("\nstyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("border "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1px solid red'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次 回流 + 重绘")]),t._v("\nstyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("color "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次重绘")]),t._v("\nstyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#ccc'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次重绘")]),t._v("\nstyle"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fontSize "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'14px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再一次 回流 + 重绘")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加node，再一次 回流 + 重绘")]),t._v("\ndocument"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTextNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"如何减少回流、重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何减少回流、重绘","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何减少回流、重绘")]),t._v(" "),e("p",[t._v("减少回流、重绘其实就是需要减少对 render tree 的操作，并减少对一些 style 信息的请求，尽量利用好浏览器的优化策略。具体方法有：")]),t._v(" "),e("ul",[e("li",[t._v("不要 1 个 1 个改变元素的样式属性，最好直接改变 className，但 className 是预先定义好的样式，不是动态的，如果你要动态改变一些样式，则使用 cssText 来改变，见下面代码：")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不好的写法")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" top "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比较好的写法")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("className "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' className1'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比较好的写法")]),t._v("\nel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cssText "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'; left: '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px; top: '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" top "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'px;'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[e("p",[t._v("让要操作的元素处理完后一起更新，即让元素不存在于 render tree 中，")]),t._v(" "),e("ul",[e("li",[t._v("使用 "),e("code",[t._v("documentFragment")]),t._v(" 或 div 等元素进行缓存操作，这个主要用于添加元素的时候，就是先把所有要添加到元素添加到 1 个 div(这个 div 也是新加的)，\n最后才把这个 div append 到 body 中。")]),t._v(" "),e("li",[t._v("先 display:none 隐藏元素，然后对该元素进行所有的操作，最后再显示该元素。因对 display:none 的元素进行操作不会引起回流、重绘。所以只要操作只会有 2 次回流 + 重绘。")])])]),t._v(" "),e("li",[e("p",[t._v("不要经常访问会引起浏览器 flush 队列的属性，如果确实要访问，就先读取到变量中进行缓存，以后用的时候直接读取变量就可以了：")])])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不好的写法，每次遍历都会去重新获取el的属性")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("循环"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这样写好点")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetLeft"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" top  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" s "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("循环"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    top  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" left "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    s"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" top  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"px"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("ul",[e("li",[t._v("考虑你的操作会影响到 render tree 中的多少节点以及影响的方式，影响越多，花费肯定就越多。")])]),t._v(" "),e("h2",{attrs:{id:"dns-解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dns-解析过程","aria-hidden":"true"}},[t._v("#")]),t._v(" DNS 解析过程")]),t._v(" "),e("p",[t._v("当一个用户在地址栏输入 www.taobao.com 时，DNS 解析有大致十个过程，如下：")]),t._v(" "),e("ol",[e("li",[t._v("浏览器先检查自身缓存中有没有被解析过的这个域名对应的 ip 地址，如果有，解析结束。同时域名被缓存的时间也可通过"),e("code",[t._v("TTL")]),t._v("属性来设置。")]),t._v(" "),e("li",[t._v("如果浏览器缓存中还没命中，浏览器会检查操作系统缓存中有没有对应的已解析过的结果。而操作系统也有一个域名解析的过程。通过"),e("code",[t._v("C:\\Windows\\System32\\drivers\\etc")]),t._v("下的 hosts 文件来设置，如果你在这里指定了一个域名对应的 ip 地址，那浏览器会首先使用这个 ip 地址。")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(335),alt:"hosts文件路径"}})]),t._v(" "),e("p",[e("img",{attrs:{src:a(336),alt:"hosts文件"}})]),t._v(" "),e("p",[t._v("但是这种操作系统级别的域名解析规程也被很多黑客利用，通过修改你的 hosts 文件里的内容把特定的域名解析到他指定的 ip 地址上，造成所谓的"),e("code",[t._v("域名劫持")]),t._v("。所以在 windows7 中将 hosts 文件设置成了"),e("code",[t._v("readonly")]),t._v("，防止被恶意篡改。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("如果至此还没有命中域名，才会真正的请求本地域名服务器（LDNS）来解析这个域名，这台服务器一般在你的城市的某个角落，距离你不会很远，并且这台服务器的性能都很好，一般都会缓存域名解析结果，大约 80%的域名解析到这里就完成了。")]),t._v(" "),e("li",[t._v("如果 LDNS 仍然没有命中，就直接跳到根域名服务器 Root Server 请求解析")]),t._v(" "),e("li",[t._v("Root Server 返回给 LDNS 一个所查询域的主域名服务器（gTLD Server，国际顶尖域名服务器，如.com .cn .org 等）地址")]),t._v(" "),e("li",[t._v("此时 LDNS 再发送请求给上一步返回的 gTLD")]),t._v(" "),e("li",[t._v("接受请求的 gTLD 查找并返回这个域名对应的 Name Server 的地址，这个 Name Server 就是网站注册的域名服务器")]),t._v(" "),e("li",[t._v("Name Server 根据映射关系表找到目标 ip，返回给 LDNS")]),t._v(" "),e("li",[t._v("LDNS 缓存这个域名和对应的 ip")]),t._v(" "),e("li",[t._v("LDNS 把解析的结果返回给用户，用户根据 TTL 值缓存到本地系统缓存中，域名解析过程至此结束")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(337),alt:"dns设置"}})]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",[t._v("TTL(Time To Live): 表示一条域名解析记录在 DNS 服务器上的缓存时间。数值越小，修改记录各地生效时间越快。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);